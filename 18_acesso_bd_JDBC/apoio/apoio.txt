- [BANCO DE DADOS - COMPREENDENDO]

1 - O que é um Banco de Dados?

        Um banco de dados é uma coleção organizada de dados. Esses dados são estruturados de forma a permitir o 
        armazenamento, recuperação, atualização e gerenciamento eficientes.

2 - Sistemas de Gerenciamento de Bancos de Dados (SGBD):

        Os SGBDs são softwares que fornecem uma interface para interagir com o banco de dados. Exemplos incluem 
        MySQL, PostgreSQL, Oracle, SQL Server, SQLite, entre outros.

3 - Modelo Relacional:

        Muitos bancos de dados seguem o modelo relacional, onde os dados são organizados em tabelas com linhas (registros) 
        e colunas (campos). Relacionamentos entre tabelas são estabelecidos por meio de chaves.

4 - SQL (Structured Query Language):

        SQL é uma linguagem usada para consultar e manipular dados em bancos de dados relacionais. Ela inclui comandos como 
        SELECT, INSERT, UPDATE, DELETE para realizar operações no banco de dados.

5 - Tabelas e Esquemas:

        Tabelas são estruturas fundamentais que armazenam os dados. Cada tabela tem um conjunto específico de colunas e cada coluna
        possui um tipo de dados associado. Conjuntos de tabelas formam esquemas.

6 - Chaves Primárias e Estrangeiras:

        Chaves primárias são identificadores únicos em uma tabela, enquanto chaves estrangeiras são usadas para estabelecer relacionamentos 
        entre tabelas.

7 - Normalização:

        Normalização é o processo de organizar dados para reduzir a redundância e dependência. Isso ajuda a evitar problemas como a inserção,
        atualização ou exclusão de dados que poderiam resultar em inconsistências.

8 - Backup e Recuperação:

        A segurança dos dados é crucial. Isso inclui a realização regular de backups para evitar perda de dados e a implementação de práticas 
        de recuperação em caso de falhas.

9 - Índices:

        Índices são estruturas que melhoram a velocidade de recuperação de dados em consultas. Eles são semelhantes aos índices em livros, 
        tornando mais fácil encontrar informações específicas.

10 - Segurança e Permissões:

        Os SGBDs oferecem recursos para controlar o acesso aos dados. É importante entender como conceder permissões e garantir a segurança dos 
        dados sensíveis.

11 - Conceitos de Transação:

        Transações garantem a integridade dos dados, garantindo que um conjunto de operações seja executado como uma única unidade.

Esses são apenas alguns conceitos básicos. À medida que você avança, você pode explorar tópicos mais avançados, como otimização de consultas, modelagem de dados, 
procedimentos armazenados, triggers, entre outros. Prática e experiência são fundamentais, então, à medida que aprende, tente aplicar seus conhecimentos em projetos práticos.


=======> Como surge um banco de dados?
        Surge a partir de uma gereralização pensada (Requisito de software)
        que atende aos parâmetros de uma necessidade.

        Se baseia em que variáveis precisam associadas ao banco a partir de uma entidade

        Cliente -> Nome, idade, email,..., id.



[PROBLEMA 1]
O cliente Tera Comércio de Produtos S.A, solicitou a modelagem de um banco de dados para cadastro dos seus clientes.
A função da Unidados é a análise dos requisitos junto aos usuários para a correta construção do produto. O cliente deseja que 
,inicialmente os scripts sejam construídos para o Banco de Dados MySQL, porém, posteriormente pode haver mudança no ambiente e consequentemente 
adaptação dos scripts para outros produtos de SGBD.

O cliente não quer nenhuma informação relativa à vendas ou estoque, desejando somente as informações primárias de Clientes

/* MODELAGEM BÁSICA - ENTIDADE = TABELA */ 
/*
CLIENTE

NOME - CARACTER(30)
CPF - NUMERICO(11)
EMAIL - CARACTERE(30)
TELEFONE - CARACTERE(30)
ENDERECO - CARACTERE(100)
SEXO - CARACTERE(1)

/* PROCESSOS DE MODELAGEM */

/* FASE 01 E FASE 02 - FEITAS PELO ADMINISTRADOR DE DADOS */
/*
MODELAGEM CONCEITUAL - RASCUNHO(CONVERSA DE COMO SERÁ MODELADO)
MODELAGEM LÓGICA - APLICA O RASCUNHO A UM MODELO LÓGICO, EX: UML, QUALQUER PROGRAMA DE MODELAGEM
/* FASE 03 - DBA OU AD */ 
/*
MODELAGEM FÍSICA - SCRIPTS DE BANCO - SQL + TIPAGEM DE DADOS
*/

/* INCIANDO MODELAGEM FÍSICA */ 


>>>>>>>>>>>>>>> SINTAXE <<<<<<<<<<<<<<<<<<


/* Criando banco de dados */ 

CREATE DATABASE EXEMPLO;

CREATE DATABASE PROJETO;

/* MAS E AÍ, COMO SABER QUAL ESTOU USANDO? OBS: NÃO SE PODE CRIAR O DB COM MESMO NOME */

/* CONECTANDO-SE AO BANCO */

USE PROJETO;

/* CRIANDO A TABELA DE CLIENTES */

CREATE TABLE CLIENTE(
	
	NOME VARCHAR(30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30),
	CPF INT(11),
	TELEFONE VARCHAR(30),
	ENDERECO VARCHAR(100)
);

/* VERIFICANDO AS TABELAS DO BANCO */ 

SHOW TABLES;

USE EXEMPLO;
SHOW TABLES;

USE PROJETO

/* DESCOBRINDO COMO É A ESTRUTURA DE UMA TABELA (O QUE COMPOE A TABELA?) */

DESC PROJETO;

[FALANDO SOBRE TUNNING] ----> A PERFORMANCE DE UM BANCO A PARTIR DA ANALISE DOS TIPOS.

- CHAR E VARCHAR

        . Cada char vale 1byte 
        EX:
                NOME CHAR(10) -> Usuario com nome João = [J][O][A][O][][][][][][] -> 6 espaços ocupados por " ".
                O resultado é mais dados desnecessários circulando nos campos, consequentemente tornando mais pesado.

                NOME VARCHAR(10) -> [J][O][A][O] - Alocado e descartado os 6 espaços restantes - dinâmica do VARCHAR

        . Porém o char é mais performático, pois não depende da variancia do numero de caracteres do dado inserido.

        DICA => USAR CHAR QUANDO: O NUMERO DE CARACTERES DA COLUNA NUNCA FOR VARIANTE.
        ex: unidades federativas RJ, SP, AM, PR, SC, ..., ES.

 - ENUM -> ENUMERAÇÃO

        .


 CREATE TABLE PRODUTO(

	ID INTEGER,
	NOME VARCHAR(30),
	PREÇO DOUBLE
	
);

/* SINTAXE BÁSICA DE INSERÇÃO - INSERT INTO... ("..." - VARIA DE BANCO PRA BANCO)*/

/* FORMA 01 - EXCLUINDO COLUNAS */
/* VALORES DEVEM SER INSERIDOS NA EXATA ORDEM EM QUE ESTÃO NO BANCO */

INSERT INTO CLIENTE VALUES('JOAO','M','JOAO@GMAIL.COM',988638273,'22923110','MAIA LACERDA - ESTACIO - RIO DE JANEIRO - RJ');

INSERT INTO CLIENTE VALUES('CELIA','F','CELIA@GMAIL.COM',541521456,'25078869','RIACHUELO - CENTRO - RIO DE JANEIRO - RJ');

INSERT INTO CLIENTE VALUES('JORGE','M',NULL,885755896,'58748895','OSCAR CURY - BOM RETIRO - PATOS DE MINAS - MG');
/* SE NULL NÃO FOSSE INSERIDO, O CAMPO 'EMAIL', SERIA LIDO COMO TELEFONE(885755896) (BAD METHOD) */


/* FORMA 02 - COLOCANDO AS COLUNAS */

INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('LILIAN','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','947785696',887774856);
/* Especificação da ordem de entrada e omissão do campo Email, validado como NULL */

/* FORMA 03 - INSERT COMPACTO - SOMENTE MYSQL */

INSERT INTO CLIENTE VALUES('ANA','F','ANA@GLOBO.COM',85548962,'548556985','PRES ANTONIO CARLOS - CENTRO - SAO PAULO - SP'),
                          ('CARLA','F','CARLA@TERATI.COM.BR',7745828,'66587458','SAMUEL SILVA - CENTRO - BELO HORIZONTE - MG');
						  

/* ERRO: OUT OF RANGE - APESAR DE SER 9 DIGITOS NO CPF - MAS POR QUE? */
INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('CLARA','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','424555696',88777485611);

INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('MARCELA','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','424555696',23456789111);
/* OS NUMEROS INSERIDOS ULTRAPASSAM O LIMITE ESTABELECIDO PELO TIPO INT */

/* 
	-> O COMANDO SELECT
	EXSITEM CARACTERÍSTICAS SEMPRE PRESENTES -> SELEÇÃO PROJEÇÃO E JUNÇÃO
*/

/* =================== PROJEÇÕES =================== */

/* "É O QUE VOCE QUER VER" - SE QUER VER TAL COISA, É PROJEÇÃO(SELECT FROM .....)*/

/* SELECT NÃO É SELEÇÃO, É PROJEÇÃO */

SELECT NOW() as DATA_HORA, 'LUIZ OTAVIO' AS ALUNO;

SELECT 'FELIPE MAFRA';

SELECT 'BANCO DE DADOS';

/* ALIAS DE COLUNAS - ORDEM A MEU CRITÉRIO */

SELECT NOME, SEXO, EMAIL FROM CLIENTE;

SELECT NOME AS CLIENTE, SEXO, EMAIL, ENDERECO FROM CLIENTE;

SELECT NOME AS CLIENTE, SEXO, EMAIL, ENDERECO, NOW() FROM CLIENTE;

/* USAR SOMENTE PARA FINS ACADÊMICOS  - SELECIONA TUDO DA TABELA */
/* SELECIONA A TABELA SEM NENHUM CRITÉRIO DE BUSCA - IMAGINAR PARA SITUAÇÕES ONDE O BANOC ESTÁ SOBRECARREGADO */
SELECT * FROM CLIENTE;

/* FILTROS */

/* RETORNA TABELA INTEIRA, NÃO É IDEAL PARA GRANDES TABELAS */
SELECT * FROM CLIENTE;

/* 
	PROJEÇÃO: SELECT
	SELEÇÃO: WHERE
*/

/* FILTRANDO */

SELECT NOME, SEXO FROM CLIENTE
WHERE SEXO = 'M';

SELECT NOME, ENDERECO FROM CLIENTE
WHERE SEXO = 'F';

SELECT NOME, SEXO FROM CLIENTE
WHERE ENDERECO = 'RJ';

/* UTILIZANDO O LIKE */

SELECT NOME, SEXO FROM CLIENTE
WHERE ENDERECO LIKE 'RJ';

/* O SQL ACIMA AINDA NÃO FUNCIONA, MAS POR QUE? */
/* CARACTER CORINGA  % -> QUER DIZER QUALQUER COISA */

SELECT NOME, SEXO FROM CLIENTE
WHERE ENDERECO LIKE '%RJ';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE ENDERECO LIKE '%TIJUCA%';

/* EXERCÍCIO DADOS DOS LIVROS */

CREATE DATABASE LIVRARIA;

USE LIVRARIA;

CREATE TABLE LIVROS(
	NOME_LIVRO VARCHAR(255),	
	NOME_AUTOR VARCHAR(255),
	SEXO_AUTOR VARCHAR(30),
	NUMERO_PAGINAS INT,
	NOME_EDITORA VARCHAR(255),
	VALOR_LIVRO DECIMAL(10,2),
	UF_EDITORA CHAR(2),
	ANO_PUBLICACAO INT
);

INSERT INTO LIVROS (NOME_LIVRO, NOME_AUTOR, SEXO_AUTOR, NUMERO_PAGINAS, NOME_EDITORA, VALOR_LIVRO, UF_EDITORA, ANO_PUBLICACAO)
VALUES 
('Cavaleiro Real', 'Ana Claudia', 'Feminino', 465, 'Atlas', 49.9, 'RJ', 2009),
('SQL para leigos', 'João Nunes', 'Masculino', 450, 'Addison', 98, 'SP', 2018),
('Receitas Caseiras', 'Celia Tavares', 'Feminino', 210, 'Atlas', 45, 'RJ', 2008),
('Pessoas Efetivas', 'Eduardo Santos', 'Masculino', 390, 'Beta', 78.99, 'RJ', 2018),
('Habitos Saudáveis', 'Eduardo Santos', 'Masculino', 630, 'Beta', 150.98, 'RJ', 2019),
('A Casa Marrom', 'Hermes Macedo', 'Masculino', 250, 'Bubba', 60, 'MG', 2016),
('Estacio Querido', 'Geraldo Francisco', 'Masculino', 310, 'Insignia', 100, 'ES', 2015),
('Pra sempre amigas', 'Leda Silva', 'Feminino', 510, 'Insignia', 78.98, 'ES', 2011),
('Copas Inesqueciveis', 'Marco Alcantara', 'Masculino', 200, 'Larson', 130.98, 'RS', 2018),
('O poder da mente', 'Clara Mafra', 'Feminino', 120, 'Continental', 56.58, 'SP', 2017);


/* 1 - TRAZER TODO OS DADOS : */

SELECT * FROM LIVROS;

/* 2 - TRAZER O NOME DO LIVRO E DA EDITORA : */

SELECT NOME_LIVRO, NOME_EDITORA FROM LIVROS;

/* 3 - TRAZER O NOME DO LIVRO E UF DOS LIVROS PUBLICADOS POR MASCULINOS : */

SELECT NOME_LIVRO, UF_EDITORA FROM LIVROS WHERE SEXO_AUTOR = 'Masculino';

/* 4 - TRAZER O NOME DO LIVRO E NUMERO DE PAGINAS PUBLICADOS POR FEMININO : */

SELECT NOME_LIVRO, NUMERO_PAGINAS FROM LIVROS WHERE SEXO_AUTOR = 'Feminino';

/* 5 - TRAZER OS VALORES DOS LIVROS DAS EDITORAS DE SÃO PAULO : */

SELECT VALOR_LIVRO AS PRECO FROM LIVROS WHERE UF_EDITORA = 'SP';

/* 6 - (DESAFIO) TRAZER OS DADOS DOS AUTORES DO SEXO MASC QUE TIVERAM LIVROS PUBLICADOS POR SP
OU RJ
: */

SELECT NOME_AUTOR FROM LIVROS WHERE SEXO_AUTOR = 'Masculino' AND (UF_EDITORA = 'RJ' OR UF_EDITORA = 'SP');

/* OPERADORES LÓGICOS */
/* AND - OR */

SELECT NOME_AUTOR FROM LIVROS WHERE SEXO_AUTOR = 'FEMININO' OR UF_EDITORA = 'RJ';

SELECT NOME_AUTOR FROM LIVROS WHERE SEXO_AUTOR = 'FEMININO' AND NUMERO_PAGINAS > 100;

/* OPERADORES LÓGICOS 
OR -> PARA QUE A SAIDA DA QUERY SEJA VERDADEIRA, BASTA QUE APENAS UMA CONDICAO SEJA VERDADEIRA.
AND -> PARA QUE A SAIDA SEJA VERDADEIRA TODAS AS CONDICOES PRECISAM SER VERDADEIRAS.
*/

/* OR - OU */

SHOW DATABASES;

USE PROJETO;

SELECT * FROM CLIENTE;

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE 
SEXO = 'M' OR ENDERECO LIKE '%RJ';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE 
SEXO = 'M' AND ENDERECO LIKE '%RJ';

SELECT NOME, SEXO, ENDERECO  FROM CLIENTE
WHERE
SEXO = 'F' OR ENDERECO LIKE '%ESTACIO';

/* AND - E */

SELECT NOME, SEXO, ENDERECO  FROM CLIENTE
WHERE 
SEXO = 'M' AND ENDERECO LIKE '%RJ';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE
SEXO = 'F' AND ENDERECO LIKE '%ESTACIO';

/* COUNT(*), GROUP BY, PERFORMANCE COM OPERADORES LÓGICOS */

/* CONTANDO REGISTROS DE UMA TABELA */

SELECT COUNT(*) FROM LIVROS;

/* OPERADOR GROUP BY */

/* error */
SELECT SEXO, COUNT(*) FROM CLIENTE;
/* O RESULTADO EXIBIDO É | M | 6 | PORQUE A FUNÇÃO DE AGREGAÇÃO COUNT(*)
RETORNA SOMENTE UMA LINHA, ENQUANTO 'SEXO' RETORNA 6, GERANDO O ERRO.
*/

/* SOLUÇÃO */

SELECT SEXO, COUNT(*) FROM CLIENTE GROUP BY SEXO;
/* E O QUE O GROUP BY FAZ AQUI? A QUERY EXPLICITA QUE A AGRUPAÇÃO DEVE SER POR CADA SEXO EXISTENTE 
(POR CADA ITEM SEXO EXISTENTE) - AGRUPA POR SEXO.
*/

SELECT SEXO, COUNT(*) AS 'QUANTIDADE DE MULHERES' FROM CLIENTE WHERE SEXO = 'F' GROUP BY SEXO;

/* MINHAS QUERYS */

SELECT UF_EDITORA, COUNT(*) FROM LIVROS GROUP BY UF_EDITORA;
SELECT UF_EDITORA, COUNT(*) FROM LIVROS WHERE NUMERO_PAGINAS > 600 GROUP BY UF_EDITORA;

/* PERFORMANCE EM OPERADORES LÓGICOS */

/* 1 MILHAO DE REGISTROS

PARA CONTAR
SELECT COUNT(*) FROM CLIENTE;

SELECT SEXO, COUNT(*) FROM CLIENTE
GROUP BY SEXO;

SELECT CIDADE, COUNT(*) FROM CLIENTE
GROUP BY CIDADE;

CONDICAO
SEXO = F
CIDADE = RIO DE JANEIRO

SITUACAO - TRATANDO COM OU / OR
70% MULHERES = SEXO = F
30% MORA NO RIO DE JANEIRO

SELECT NOME, SEXO, ENDERECO
FROM CLIENTE
WHERE SEXO = 'F'
OR CIDADE = 'RIO DE JANEIRO';

SITUACAO - TRATANDO COM E / AND
70% MULHERES = SEXO = F
30% MORA NO RIO DE JANEIRO

SELECT NOME, SEXO, ENDERECO
FROM CLIENTE
WHERE CIDADE = 'RIO DE JANEIRO'
AND SEXO = 'F';

/* EXERCÍCIO */

/* Considerando o que vc aprendeu sobre performance, resolva os exercicios abaixo */

/* 
--Traga os funcionarios que trabalhem
--no departamento de filmes OU no
--departamento de roupas

-> MINHA SOLUÇÃO: 
SELECT DEPARTAMENTO, COUNT(*) FROM FUNCIONARIOS WHERE DEPARTAMENTO = 'FILMES' 
OR DEPARTAMENTO = 'ROUPAS' GROUP BY DEPARTAMENTO;

SELECT NOME FROM FUNCIONARIOS WHERE DEPARTAMENTO = 'ROUPAS' OR DEPARTAMENTO = 'FILMES';

OCORRENCIA MAIOR DO DEP 'ROUPAS' SEGUNDO A PRIMEIRA QUERY, ENTÃO 
ROUPAS É O PRIMEIRO ARGUMENTO NA CLAUSULA WHERE OR;

PROFESSOR:

SELECT * FROM FUNCIONARIOS WHERE DEPARTAMENTO = 'ROUPAS' OR DEPARTAMENTO = 'FILMES';


*/

/* 
--O gestor de marketing pediu a lista das funcionarias (AS) = FEMININO que trabalhem no departamento 
--de filmes ou no departamento lar. Ele necessita enviar um email para as colaboradoras
--desses dois setores.

-> MINHA SOLUÇÃO:

SELECT SEXO, COUNT(*) FROM FUNCIONARIOS GROUP BY SEXO;

SELECT DEPARTAMENTO, COUNT(*) FROM FUNCIONARIOS WHERE SEXO = 'FEMININO' 
AND (DEPARTAMENTO = 'FILMES' OR DEPARTAMENTO = 'LAR') GROUP BY DEPARTAMENTO;

SELECT NOME FROM FUNCIONARIOS WHERE SEXO = 'FEMININO' AND (DEPARTAMENTO = 'LAR' OR DEPARTAMENTO = 'FILMES');

CORREÇÃO:
 
EXISTEM 491 OCORRENCIAS DO (SEXO = FEMININO) E (52[LAR] OU 21[FILMES )

O MENOR DEVE TER PREFERENCIA AO PRIMEIRO PARAMETRO DA CLAUSULA, POIS FARÁ
COM QUE O 'CHECK DE CONDIÇÃO' VÁ MENOS VEZES VER SE A CONDIÇÃO ESTÁ SENDO ATENDIDA

EX: SEXO(FEMININO) -> 491 OCORRENCIAS;
	AND
	...
	O CHECK IRIA 491 VEZES VERIFICAR SE A LINHA ATENDE A CONDIÇÃO.
	
SELECT NOME FROM FUNCIONARIOS WHERE (DEPARTAMENTO = 'LAR' AND SEXO  = 'FEMININO')  
OR 
(DEPARTAMENTO = 'FILMES' AND SEXO = 'FEMININO') ;



*/ 

--Traga os funcionarios do sexo masculino
--ou os funcionarios que trabalhem no setor Jardim

/* 
SELECT NOME, DEPARTAMENTO FROM FUNCIONARIOS WHERE SEXO = 'MASCULINO' OR DEPARTAMENTO = 'JARDIM';
*/

*/




#AULA265 

- JDBC (Java Database Connectivity): API padrão do java para aceso a dados.
- pacoes: java.sql e javax.sql (API suplementar para servidores)

Resumo: o JDBC fornece um driver na sua aplicação -> JDBC Driver Manager

e ele vai converter o código para os bancos de dados a serem utilizados.

#AULA266

- Operações básicas da álgebra relacional

    . Restrição
    . Projeção
    . Produto Cartesiano
    . Junção(produto cartesiano + restrição de chaves correspondentes)

    